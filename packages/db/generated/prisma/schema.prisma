// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Merchant {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  phoneNumber String?
  address     String?
  logoUrl     String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  PaymentLink     PaymentLink[]
  Wallet          Wallet[]
  PaymentPage     PaymentPage[]
  IntiatedPayment IntiatedPayment[]
  Transaction     Transaction[]
  QRPayment       QRPayment[]
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Merchant  Merchant?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Wallet {
  id      String  @id @default(uuid())
  balance Decimal @db.Decimal(10, 2)

  stableCoin   StableCoin @relation(fields: [stableCoinId], references: [id])
  stableCoinId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  merchant   Merchant @relation(fields: [merchantId], references: [id])
  merchantId String
}

model StableCoin {
  id          String   @id @default(cuid())
  name        String
  symbol      String   @unique
  logoUrl     String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Wallet      Wallet[]
}

model PaymentLink {
  id          String            @id @default(uuid())
  amount      Decimal           @db.Decimal(10, 2)
  status      PaymentLinkStatus @default(ACTIVE)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  expiresAt   DateTime?
  description String?

  merchant   Merchant @relation(fields: [merchantId], references: [id])
  merchantId String

  IntiatedPayment IntiatedPayment[]
}

enum PaymentLinkStatus {
  COMPLETED
  PENDING
  // TODO: remove PENDING
  ACTIVE
  CANCELLED
  EXPIRED
}

model PaymentPage {
  id String @id @default(uuid())

  title       String
  description String?
  logoUrl     String
  amount      Decimal  @db.Decimal(10, 2)
  merchant    Merchant @relation(fields: [merchantId], references: [id])

  expiresAt       DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  IntiatedPayment IntiatedPayment[]
  status          PaymentPageStatus @default(PENDING)
  PaymentPageForm PaymentPageForm[]
  merchantId      String
}

enum PaymentPageStatus {
  PENDING
  COMPLETED
  FAILED
  ACTIVE
  CANCELLED
  EXPIRED
}

model IntiatedPayment {
  id String @id @default(uuid())

  initiatedFrom IntiatedFrom
  status        IntiatedPaymentStatus @default(PENDING)
  index         Int
  walletAddress String
  amount        Decimal               @db.Decimal(10, 2)

  paymentPage   PaymentPage? @relation(fields: [paymentPageId], references: [id])
  paymentPageId String?

  paymentLink   PaymentLink? @relation(fields: [paymentLinkId], references: [id])
  paymentLinkId String?

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Transaction Transaction[]

  merchant Merchant @relation(fields: [merchantId], references: [id])

  merchantId String
}

enum IntiatedFrom {
  PAYMENT_PAGE
  PAYMENT_LINK
}

enum IntiatedPaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

model Transaction {
  id     String            @id @default(uuid())
  status TransactionStatus
  amount Decimal           @db.Decimal(10, 2)

  intiatedPayment   IntiatedPayment @relation(fields: [intiatedPaymentId], references: [id])
  intiatedPaymentId String
  initiatedFrom     IntiatedFrom

  toAddress   String
  fromAddress String
  settled     Boolean
  settledAt   DateTime?
  settledTo   String?

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  merchant   Merchant @relation(fields: [merchantId], references: [id])
  merchantId String
}

enum TransactionStatus {
  PENDING
  COMPLETED
  REFUNDED
  FAILED
}

model PaymentButton {
  id          String            @id @default(uuid())
  title       String
  type        PaymentButtonType
  description String?

  amount Decimal @db.Decimal(10, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentButtonType {
  QUICK_PAYMENT
  DONATION
  OTHER
}

model PaymentPageForm {
  id String @id @default(uuid())

  paymentPage   PaymentPage @relation(fields: [paymentPageId], references: [id])
  paymentPageId String

  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  PaymentPageFormField PaymentPageFormField[]
}

model PaymentPageFormField {
  id String @id @default(uuid())

  type        PaymentPageFormFieldType
  label       String
  placeholder String?
  required    Boolean                  @default(false)
  value       String?

  paymentPageForm           PaymentPageForm             @relation(fields: [paymentPageFormId], references: [id])
  paymentPageFormId         String
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  PaymentPageFormFieldValue PaymentPageFormFieldValue[]
}

enum PaymentPageFormFieldType {
  TEXT
  NUMBER
  EMAIL
  PHONE
}

model PaymentPageFormFieldValue {
  id String @id @default(uuid())

  paymentPageFormField   PaymentPageFormField @relation(fields: [paymentPageFormFieldId], references: [id])
  paymentPageFormFieldId String

  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QRPayment {
  id String @id @default(uuid())

  amount    Decimal         @db.Decimal(10, 2)
  status    QRPaymentStatus @default(ACTIVE)
  type      QRPaymentType   @default(SINGLE_USE)
  expiresAt DateTime?
  expired   Boolean         @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  merchant   Merchant @relation(fields: [merchantId], references: [id])
  merchantId String
}

enum QRPaymentType {
  PERMANENT
  SINGLE_USE
}

enum QRPaymentStatus {
  USED
  ACTIVE
  EXPIRED
}
