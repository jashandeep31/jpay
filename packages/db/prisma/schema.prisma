generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Merchant {
  id                      String                    @id @default(uuid())
  name                    String
  email                   String                    @unique
  phoneNumber             String?
  address                 String?
  logoUrl                 String?
  description             String?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  userId                  String                    @unique
  IntiatedPayment         IntiatedPayment[]
  user                    User                      @relation(fields: [userId], references: [id])
  PaymentLink             PaymentLink[]
  PaymentPage             PaymentPage[]
  QRPayment               QRPayment[]
  Transaction             Transaction[]
  Wallet                  Wallet[]
  Invoice                 Invoice[]
  JPayLink                JPayLink[]
  APIGeneratedPaymentLink APIGeneratedPaymentLink[]
  LiveWallet              LiveWallet[]

  MerchantApiKey MerchantApiKey[]
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  Authenticator Authenticator[]
  Merchant      Merchant?
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Wallet {
  id           String     @id @default(uuid())
  balance      Decimal    @db.Decimal(10, 2)
  stableCoinId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  merchantId   String
  merchant     Merchant   @relation(fields: [merchantId], references: [id])
  stableCoin   StableCoin @relation(fields: [stableCoinId], references: [id])
  uiId         String     @unique // combo of merchantId and stableCoinId
}

model StableCoin {
  id              String            @id @default(cuid())
  name            String
  symbol          String            @unique
  logoUrl         String?
  authority       String            @unique
  description     String?
  decimalCount    Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Wallet          Wallet[]
  IntiatedPayment IntiatedPayment[]
}

model PaymentLink {
  id              String            @id @default(uuid())
  amount          Decimal           @db.Decimal(10, 2)
  status          PaymentLinkStatus @default(ACTIVE)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  oneTimeLink     Boolean           @default(false)
  expiresAt       DateTime?
  description     String?
  merchantId      String
  IntiatedPayment IntiatedPayment[]
  merchant        Merchant          @relation(fields: [merchantId], references: [id])
}

model PaymentPage {
  id              String            @id @default(uuid())
  title           String
  description     String?
  logoUrl         String
  amount          Decimal           @db.Decimal(10, 2)
  expiresAt       DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  status          PaymentPageStatus @default(PENDING)
  merchantId      String
  IntiatedPayment IntiatedPayment[]
  merchant        Merchant          @relation(fields: [merchantId], references: [id])
  PaymentPageForm PaymentPageForm?
}

// 1 initiated has wrong spelling
model IntiatedPayment {
  id               String                @id @default(uuid())
  initiatedFrom    IntiatedFrom
  status           IntiatedPaymentStatus @default(PENDING)
  index            Int
  walletAddress    String
  ataWalletAddress String
  amount           Decimal               @db.Decimal(10, 2)

  paymentPageId           String?
  paymentLinkId           String?
  invoiceId               String?
  jPayLinkId              String?
  qRPaymentId             String?
  liveWalletWalletAddress String?
  pgPaymentId             String?

  stableCoin   StableCoin    @relation(fields: [stableCoinId], references: [id])
  stableCoinId String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  merchantId   String
  merchant     Merchant      @relation(fields: [merchantId], references: [id])
  paymentLink  PaymentLink?  @relation(fields: [paymentLinkId], references: [id])
  paymentPage  PaymentPage?  @relation(fields: [paymentPageId], references: [id])
  Transaction  Transaction[]
  invoice      Invoice?      @relation(fields: [invoiceId], references: [id])
  jPayLink     JPayLink?     @relation(fields: [jPayLinkId], references: [id])
  qrPayment    QRPayment?    @relation(fields: [qRPaymentId], references: [id])
  liveWallet   LiveWallet?   @relation(fields: [liveWalletWalletAddress], references: [walletAddress])

  pgPayment APIGeneratedPaymentLink? @relation(fields: [pgPaymentId], references: [id])
}

model Transaction {
  id                     String            @id @default(uuid())
  status                 TransactionStatus
  amount                 Decimal           @db.Decimal(10, 2)
  intiatedPaymentId      String
  initiatedFrom          IntiatedFrom
  toWalletAddress        String
  fromWalletAddress      String
  toAtaWalletAddress     String
  fromAtaWalletAddress   String
  settled                Boolean           @default(false)
  settledAt              DateTime?
  settledToWalletAddress String?
  stableCoinName         String
  signature              String            @unique
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  merchantId             String
  intiatedPayment        IntiatedPayment   @relation(fields: [intiatedPaymentId], references: [id])
  merchant               Merchant          @relation(fields: [merchantId], references: [id])
}

model PaymentButton {
  id          String            @id @default(uuid())
  title       String
  type        PaymentButtonType
  description String?
  amount      Decimal           @db.Decimal(10, 2)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model PaymentPageForm {
  id                   String                 @id @default(uuid())
  paymentPageId        String                 @unique
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  paymentPage          PaymentPage            @relation(fields: [paymentPageId], references: [id])
  PaymentPageFormField PaymentPageFormField[]
}

model PaymentPageFormField {
  id                        String                      @id @default(uuid())
  type                      PaymentPageFormFieldType
  label                     String
  placeholder               String?
  required                  Boolean                     @default(false)
  value                     String?
  paymentPageFormId         String
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  paymentPageForm           PaymentPageForm             @relation(fields: [paymentPageFormId], references: [id])
  PaymentPageFormFieldValue PaymentPageFormFieldValue[]
}

model PaymentPageFormFieldValue {
  id                     String               @id @default(uuid())
  paymentPageFormFieldId String
  value                  String
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  paymentPageFormField   PaymentPageFormField @relation(fields: [paymentPageFormFieldId], references: [id])
}

model QRPayment {
  id              String            @id @default(uuid())
  amount          Decimal           @db.Decimal(10, 2)
  status          QRPaymentStatus   @default(ACTIVE)
  type            QRPaymentType     @default(SINGLE_USE)
  expiresAt       DateTime?
  expired         Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  merchantId      String
  merchant        Merchant          @relation(fields: [merchantId], references: [id])
  IntiatedPayment IntiatedPayment[]
}

enum PaymentLinkStatus {
  COMPLETED
  PENDING
  ACTIVE
  CANCELLED
  EXPIRED
}

enum PaymentPageStatus {
  PENDING
  COMPLETED
  FAILED
  ACTIVE
  CANCELLED
  EXPIRED
}

enum IntiatedFrom {
  PAYMENT_PAGE
  PAYMENT_LINK
  INVOICE
  JPAY_LINK
  QR_PAYMENT
  LIVE_WALLET
  PG_PAYMENT
}

enum IntiatedPaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  REFUNDED
  FAILED
}

enum PaymentButtonType {
  QUICK_PAYMENT
  DONATION
  OTHER
}

enum PaymentPageFormFieldType {
  TEXT
  NUMBER
  EMAIL
  PHONE
}

enum QRPaymentType {
  PERMANENT
  SINGLE_USE
}

enum QRPaymentStatus {
  USED
  ACTIVE
  EXPIRED
}

model Invoice {
  id         String @id @default(uuid())
  merchantId String

  invoiceNumber String
  invoiceDate   DateTime
  dueDate       DateTime
  pdfLink       String?
  status        InvoiceStatus @default(ACTIVE)
  amount        Decimal       @db.Decimal(10, 2)

  merchant  Merchant @relation(fields: [merchantId], references: [id])
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  IntiatedPayment IntiatedPayment[]
}

enum InvoiceStatus {
  PENDING
  ACTIVE
  PAID
  CANCELLED
}

model JPayLink {
  id                  String            @id @default(uuid())
  merchant            Merchant          @relation(fields: [merchantId], references: [id])
  merchantId          String
  uid                 String            @unique
  tag                 String // used only to respresnt
  notifyOnEachPayment Boolean           @default(false)
  IntiatedPayment     IntiatedPayment[]
  updatedAt           DateTime          @updatedAt
  createdAt           DateTime          @default(now())
}

model LiveWallet {
  id                  String            @id @default(uuid())
  merchant            Merchant          @relation(fields: [merchantId], references: [id])
  merchantId          String
  walletAddress       String            @unique
  balance             Decimal           @default(0) @db.Decimal(10, 2)
  index               Int               @unique
  notifyOnEachPayment Boolean           @default(false)
  isActive            Boolean           @default(true)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  IntiatedPayment     IntiatedPayment[]
}

model MerchantApiKey {
  id         String @id @default(uuid())
  tag        String
  privateKey String @unique // store with the hashed value
  publicKey  String @unique

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  merchant   Merchant @relation(fields: [merchantId], references: [id])
  merchantId String
}

model APIGeneratedPaymentLink {
  id          String                        @id @default(uuid())
  merchantId  String
  amount      Decimal                       @db.Decimal(10, 2)
  status      APIGeneratedPaymentLinkStatus @default(PROCESSING)
  paidAt      DateTime?
  redirectUrl String
  callbackUrl String // after the paymetn is completed we will call this url
  paymentUID  String                        @unique
  updatedAt   DateTime                      @updatedAt
  validUntil  DateTime?
  createdAt   DateTime                      @default(now())

  merchant        Merchant          @relation(fields: [merchantId], references: [id])
  IntiatedPayment IntiatedPayment[]
}

enum APIGeneratedPaymentLinkStatus {
  PROCESSING
  PAID
  FAILED
}
