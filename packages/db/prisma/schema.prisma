// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  PaymentLink PaymentLink[]
  Wallet      Wallet[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Wallet {
  id      String  @id @default(uuid())
  balance Decimal @db.Decimal(10, 2)

  user         User       @relation(fields: [userId], references: [id])
  userId       String
  stableCoin   StableCoin @relation(fields: [stableCoinId], references: [id])
  stableCoinId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StableCoin {
  id          String        @id @default(cuid())
  name        String
  symbol      String        @unique
  logoUrl     String?
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  PaymentLink PaymentLink[]
  Wallet      Wallet[]
}

model PaymentLink {
  id        String            @id @default(uuid())
  amount    Decimal           @db.Decimal(10, 2)
  status    PaymentLinkStatus
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  expiresAt DateTime?

  stableCoin StableCoin @relation(fields: [stableCoinId], references: [id])
  user       User       @relation(fields: [userId], references: [id])

  stableCoinId    String
  userId          String
  IntiatedPayment IntiatedPayment[]
}

enum PaymentLinkStatus {
  PENDING
  COMPLETED
  FAILED
  EXPIRED
}

model PaymentPage {
  id String @id @default(uuid())

  title       String
  description String?
  logoUrl     String
  amount      Decimal @db.Decimal(10, 2)

  expiresAt       DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  IntiatedPayment IntiatedPayment[]
}

model IntiatedPayment {
  id String @id @default(uuid())

  initiatedFrom IntiatedFrom
  status        IntiatedPaymentStatus
  index         Int
  walletAddress String
  amount        Decimal               @db.Decimal(10, 2)

  paymentPage   PaymentPage? @relation(fields: [paymentPageId], references: [id])
  paymentPageId String?

  paymentLink   PaymentLink? @relation(fields: [paymentLinkId], references: [id])
  paymentLinkId String?

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Transaction Transaction[]
}

enum IntiatedFrom {
  PAYMENT_PAGE
  PAYMENT_LINK
}

enum IntiatedPaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

model Transaction {
  id     String            @id @default(uuid())
  status TransactionStatus
  amount Decimal           @db.Decimal(10, 2)

  intiatedPayment   IntiatedPayment @relation(fields: [intiatedPaymentId], references: [id])
  intiatedPaymentId String
  initiatedFrom     IntiatedFrom

  toAddress   String
  fromAddress String
  settled     Boolean
  settledAt   DateTime?
  settledTo   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TransactionStatus {
  PENDING
  COMPLETED
  REFUNDED
  FAILED
}
